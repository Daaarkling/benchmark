/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var friend_pb = require('./friend_pb.js');
goog.exportSymbol('proto.Person', null, global);
goog.exportSymbol('proto.Person.EyeColor', null, global);
goog.exportSymbol('proto.Person.Fruit', null, global);
goog.exportSymbol('proto.Person.Gender', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Person = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Person.repeatedFields_, null);
};
goog.inherits(proto.Person, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Person.displayName = 'proto.Person';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Person.repeatedFields_ = [19,20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Person.prototype.toObject = function(opt_includeInstance) {
  return proto.Person.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Person} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Person.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    guid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isactive: jspb.Message.getFieldWithDefault(msg, 4, false),
    balance: jspb.Message.getFieldWithDefault(msg, 5, ""),
    picture: jspb.Message.getFieldWithDefault(msg, 6, ""),
    age: jspb.Message.getFieldWithDefault(msg, 7, 0),
    eyecolor: jspb.Message.getFieldWithDefault(msg, 8, 0),
    name: jspb.Message.getFieldWithDefault(msg, 9, ""),
    gender: jspb.Message.getFieldWithDefault(msg, 10, 0),
    company: jspb.Message.getFieldWithDefault(msg, 11, ""),
    email: jspb.Message.getFieldWithDefault(msg, 12, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 13, ""),
    address: jspb.Message.getFieldWithDefault(msg, 14, ""),
    about: jspb.Message.getFieldWithDefault(msg, 15, ""),
    registered: jspb.Message.getFieldWithDefault(msg, 16, ""),
    latitude: +jspb.Message.getFieldWithDefault(msg, 17, 0.0),
    longitude: +jspb.Message.getFieldWithDefault(msg, 18, 0.0),
    tagsList: jspb.Message.getField(msg, 19),
    friendsList: jspb.Message.toObjectList(msg.getFriendsList(),
    friend_pb.Friend.toObject, includeInstance),
    greeting: jspb.Message.getFieldWithDefault(msg, 21, ""),
    favoritefruit: jspb.Message.getFieldWithDefault(msg, 22, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Person}
 */
proto.Person.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Person;
  return proto.Person.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Person} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Person}
 */
proto.Person.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGuid(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsactive(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalance(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPicture(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAge(value);
      break;
    case 8:
      var value = /** @type {!proto.Person.EyeColor} */ (reader.readEnum());
      msg.setEyecolor(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 10:
      var value = /** @type {!proto.Person.Gender} */ (reader.readEnum());
      msg.setGender(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompany(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbout(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegistered(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatitude(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitude(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 20:
      var value = new friend_pb.Friend;
      reader.readMessage(value,friend_pb.Friend.deserializeBinaryFromReader);
      msg.addFriends(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setGreeting(value);
      break;
    case 22:
      var value = /** @type {!proto.Person.Fruit} */ (reader.readEnum());
      msg.setFavoritefruit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Person} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Person.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Person.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Person.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getGuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getIsactive();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = this.getBalance();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getPicture();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getAge();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = this.getEyecolor();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getGender();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = this.getCompany();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getEmail();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = this.getPhone();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = this.getAddress();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = this.getAbout();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = this.getRegistered();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = this.getLatitude();
  if (f !== 0.0) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = this.getLongitude();
  if (f !== 0.0) {
    writer.writeFloat(
      18,
      f
    );
  }
  f = this.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      19,
      f
    );
  }
  f = this.getFriendsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      friend_pb.Friend.serializeBinaryToWriter
    );
  }
  f = this.getGreeting();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = this.getFavoritefruit();
  if (f !== 0.0) {
    writer.writeEnum(
      22,
      f
    );
  }
};


/**
 * optional string _id = 1;
 * @return {string}
 */
proto.Person.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Person.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 index = 2;
 * @return {number}
 */
proto.Person.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Person.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string guid = 3;
 * @return {string}
 */
proto.Person.prototype.getGuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Person.prototype.setGuid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool isActive = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Person.prototype.getIsactive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.Person.prototype.setIsactive = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string balance = 5;
 * @return {string}
 */
proto.Person.prototype.getBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Person.prototype.setBalance = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string picture = 6;
 * @return {string}
 */
proto.Person.prototype.getPicture = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Person.prototype.setPicture = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 age = 7;
 * @return {number}
 */
proto.Person.prototype.getAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.Person.prototype.setAge = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional EyeColor eyeColor = 8;
 * @return {!proto.Person.EyeColor}
 */
proto.Person.prototype.getEyecolor = function() {
  return /** @type {!proto.Person.EyeColor} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.Person.EyeColor} value */
proto.Person.prototype.setEyecolor = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string name = 9;
 * @return {string}
 */
proto.Person.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.Person.prototype.setName = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional Gender gender = 10;
 * @return {!proto.Person.Gender}
 */
proto.Person.prototype.getGender = function() {
  return /** @type {!proto.Person.Gender} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.Person.Gender} value */
proto.Person.prototype.setGender = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string company = 11;
 * @return {string}
 */
proto.Person.prototype.getCompany = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.Person.prototype.setCompany = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string email = 12;
 * @return {string}
 */
proto.Person.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.Person.prototype.setEmail = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string phone = 13;
 * @return {string}
 */
proto.Person.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.Person.prototype.setPhone = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string address = 14;
 * @return {string}
 */
proto.Person.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.Person.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string about = 15;
 * @return {string}
 */
proto.Person.prototype.getAbout = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.Person.prototype.setAbout = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional string registered = 16;
 * @return {string}
 */
proto.Person.prototype.getRegistered = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.Person.prototype.setRegistered = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional float latitude = 17;
 * @return {number}
 */
proto.Person.prototype.getLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 17, 0.0));
};


/** @param {number} value */
proto.Person.prototype.setLatitude = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional float longitude = 18;
 * @return {number}
 */
proto.Person.prototype.getLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 18, 0.0));
};


/** @param {number} value */
proto.Person.prototype.setLongitude = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * repeated string tags = 19;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.Person.prototype.getTagsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 19));
};


/** @param {!Array.<string>} value */
proto.Person.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 19, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.Person.prototype.addTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 19, value, opt_index);
};


proto.Person.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * repeated Friend friends = 20;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Friend>}
 */
proto.Person.prototype.getFriendsList = function() {
  return /** @type{!Array.<!proto.Friend>} */ (
    jspb.Message.getRepeatedWrapperField(this, friend_pb.Friend, 20));
};


/** @param {!Array.<!proto.Friend>} value */
proto.Person.prototype.setFriendsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.Friend=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Friend}
 */
proto.Person.prototype.addFriends = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.Friend, opt_index);
};


proto.Person.prototype.clearFriendsList = function() {
  this.setFriendsList([]);
};


/**
 * optional string greeting = 21;
 * @return {string}
 */
proto.Person.prototype.getGreeting = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.Person.prototype.setGreeting = function(value) {
  jspb.Message.setField(this, 21, value);
};


/**
 * optional Fruit favoriteFruit = 22;
 * @return {!proto.Person.Fruit}
 */
proto.Person.prototype.getFavoritefruit = function() {
  return /** @type {!proto.Person.Fruit} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {!proto.Person.Fruit} value */
proto.Person.prototype.setFavoritefruit = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * @enum {number}
 */
proto.Person.EyeColor = {
  BLUE: 0,
  BROWN: 1,
  GREEN: 2
};

/**
 * @enum {number}
 */
proto.Person.Gender = {
  MALE: 0,
  FEMALE: 1
};

/**
 * @enum {number}
 */
proto.Person.Fruit = {
  APPLE: 0,
  BANANA: 1,
  STRAWBERRY: 2
};

goog.object.extend(exports, proto);
